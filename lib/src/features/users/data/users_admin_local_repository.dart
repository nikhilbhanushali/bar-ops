import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:bar_ops/firebase_options.dart'; // generated by flutterfire configure

class UsersAdminLocalRepository {
  UsersAdminLocalRepository(this._db, this._primaryAuth);
  final FirebaseFirestore _db;
  final FirebaseAuth _primaryAuth;

  static const _secondaryName = 'adminCreate';

  Future<FirebaseApp> _ensureSecondaryApp() async {
    try {
      return Firebase.app(_secondaryName);
    } catch (_) {
      return Firebase.initializeApp(
        name: _secondaryName,
        options: DefaultFirebaseOptions.currentPlatform,
      );
    }
  }

  /// Creates a new user account without logging out the admin.
  /// Returns the new user's uid.
  Future<String> createUserAsAdmin({
    required String displayName,
    required String email,
    required String role,           // admin|store|designer|engineer|accounts
    required String tempPassword,   // admin-provided temporary password
  }) async {
    final emailLc = email.trim().toLowerCase();

    // 1) Use secondary app so primary session (admin) stays signed in.
    final secondaryApp = await _ensureSecondaryApp();
    final secondaryAuth = FirebaseAuth.instanceFor(app: secondaryApp);

    try {
      // 2) Create the Auth user on the secondary auth instance
      final cred = await secondaryAuth.createUserWithEmailAndPassword(
        email: emailLc,
        password: tempPassword,
      );
      final uid = cred.user!.uid;

      // 3) (Optional) Set displayName on the new account
      await cred.user!.updateDisplayName(displayName);

      // 4) Write the Firestore profile as ADMIN via the PRIMARY app
      final now = DateTime.now().toUtc().toIso8601String();
      await _db.collection('users').doc(uid).set({
        'displayName': displayName,
        'email': emailLc,
        'phone': '',
        'role': role,
        'status': 'active',
        'createdAt': now,
        'createdBy': _primaryAuth.currentUser!.uid,
        'updatedAt': now,
        'updatedBy': _primaryAuth.currentUser!.uid,
      }, SetOptions(merge: true));

      // 5) (Optional) force the new user to change password later
      // You can also send a reset email from secondaryAuth:
      // await secondaryAuth.sendPasswordResetEmail(email: emailLc);

      return uid;
    } on FirebaseAuthException catch (e) {
      // surface friendly messages to UI
      if (e.code == 'email-already-in-use') {
        throw Exception('Email already exists');
      }
      if (e.code == 'invalid-email') {
        throw Exception('Invalid email');
      }
      if (e.code == 'weak-password') {
        throw Exception('Password too weak');
      }
      rethrow;
    } finally {
      // 6) Sign the secondary auth out; keep admin session intact
      try { await secondaryAuth.signOut(); } catch (_) {}
      // You can also delete the app to free resources:
      // await secondaryApp.delete();
      // (Recreate next time; or keep it aliveâ€”both fine)
    }
  }
}
